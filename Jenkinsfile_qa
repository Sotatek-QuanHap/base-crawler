pipeline {
  agent any
  environment {
    IMAGE_REPO_NAME = "qa-helix-crawler"
    AWS_ACCOUNT_ID = "968270538251"
    AWS_DEFAULT_REGION = "ap-southeast-1"
  }

  stages {
    stage('Pre Build') { 
      steps {
        script {
        sh 'echo Prebuild command'
        sh 'echo IMAGE_REPO_NAME $IMAGE_REPO_NAME'
        sh 'echo AWS_ACCOUNT_ID $AWS_ACCOUNT_ID'
        sh 'echo AWS_DEFAULT_REGION $AWS_DEFAULT_REGION'
        sh 'echo Logging in to Amazon ECR...'
        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        }
      }
    }
    stage('Build') { 
      steps {
        script {
        sh 'echo Start build ...'
        env.COMMIT_HASH = sh(script:'git rev-parse --short=8 HEAD', returnStdout: true).trim()
        env.REPOSITORY_URI= sh(script: 'echo $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME', returnStdout: true).trim()
        sh 'echo $COMMIT_HASH'
        sh 'echo Build started on `date`'
        sh 'echo Building the Docker image...'
        sh 'printenv > .env'
        sh 'docker build -t $REPOSITORY_URI:latest .'
        sh 'docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$COMMIT_HASH'
        sh 'echo Build completed on `date`'
        sh 'echo Pushing the Docker image...'
        sh "docker push ${REPOSITORY_URI}:latest"
        sh "docker push ${REPOSITORY_URI}:${COMMIT_HASH}"  
        }
      }
    }
    stage('Deploy') { 
      steps {
        script {
          env.COMMIT_HASH = sh(script:'git rev-parse --short=8 HEAD', returnStdout: true).trim()
          env.REPOSITORY_URI= sh(script: 'echo $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME', returnStdout: true).trim()
          sh '''
            CLUSTER_NAME=qa-helix
            SERVICE_NAME=$IMAGE_REPO_NAME
            TASK_DEFINITION_NAME=$IMAGE_REPO_NAME
            echo $TASK_DEFINITION_NAME
            TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME --region $AWS_DEFAULT_REGION)
            echo $TASK_DEFINITION | jq --arg NEW_IMAGE "${REPOSITORY_URI}:${COMMIT_HASH}" '.taskDefinition | .containerDefinitions[0].image = $NEW_IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' > task-def.json
            cat task-def.json
            TASK_REVISION=$(aws ecs register-task-definition --family $TASK_DEFINITION_NAME --region $AWS_DEFAULT_REGION --cli-input-json file://task-def.json | jq --raw-output '.taskDefinition.revision')
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEFINITION_NAME --force-new-deployment
            aws ecs wait services-stable --cluster $CLUSTER_NAME --service $SERVICE_NAME
          '''
        }
      }
    }
  }
}
